name: Terraform GitHub Actions Demo
run-name: ${{ github.actor }} ${{ github.event_name }} ${{ github.sha }}
on:
  push:
    branches:
      - main
  pull_request:
jobs:
#  Validate-YAML-with-Yamale:
#    runs-on: self-hosted
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Validate YAML schema
#        uses: nrkno/yaml-schema-validator-github-action@v4
#        with:
#          schema: schema_yamale.yml
#          target: datamodel_yamale.yml
#          # Uncomment to disable strict checks
#          # no-strict: true
#  RunPythonScript:
#    runs-on: self-hosted
#    steps:
##      - uses: actions/checkout@v3
#      - name: Get scripts from repo
#        uses: actions/checkout@v3
#        with:
#          repository: ctvedt/scripts
#          path: scripts
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
##      - name: Create python file
##        run: |
##          cat << EOF > script.py
##          import os
##          print("This will not fail!")
##          os.sys.exit(0)
##          EOF
#      - name: Run test script
#        run: python scripts/test.py
##  Approval:
##    runs-on: self-hosted
##    environment: 'protected'
##    needs: Validate-YAML-with-Yamale
##    steps:
##      - name: Print
##        run: echo "Approved!!"
  Terraform:
    runs-on: self-hosted
#    container:
#      image: ubuntu:latest
#      volumes:
#        - /home/ctvedt/tfstate:/tfstate
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '16'

#      - run: apt update && apt install unzip

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_version: 1.3.7

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
#        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -lock-timeout=5m -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
